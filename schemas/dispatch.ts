import { z } from "zod";

// Common schemas for embedded fields
export const locationSchema = z.object({
  name: z.string().min(1, "Location name is required"),
  address: z.string().min(1, "Address is required"),
  city: z.string().min(1, "City is required"),
  state: z.string().min(1, "State is required"),
  zipCode: z.string().min(1, "ZIP code is required"),
  latitude: z.number().optional(),
  longitude: z.number().optional(),
  contactName: z.string().optional(),
  contactPhone: z.string().optional(),
  notes: z.string().optional(),
});
export const customerSchema = z.object({
  id: z.string().optional(),
  name: z.string().min(1, "Customer name is required"),
  contactName: z.string().optional(),
  email: z.string().email("Invalid email").optional(),
  phone: z.string().optional(),
  address: z.string().optional(),
  city: z.string().optional(),
  state: z.string().optional(),
  zipCode: z.string().optional(),
  mcNumber: z.string().optional(),
  dotNumber: z.string().optional(),
  creditLimit: z.number().optional(),
  paymentTerms: z.string().optional(),
  notes: z.string().optional(),
});
export const equipmentRequirementSchema = z.object({
  type: z.enum(["dry_van", "reefer", "flatbed", "step_deck", "lowboy", "tanker", "container", "other"]),
  length: z.number().optional(),
  temperatureMin: z.number().optional(),
  temperatureMax: z.number().optional(),
  hazmat: z.boolean().optional(),
  overweight: z.boolean().optional(),
  oversized: z.boolean().optional(),
  specialPermits: z.array(z.string()).optional(),
  notes: z.string().optional(),
});
export const cargoDetailsSchema = z.object({
  description: z.string().min(1, "Description is required"),
  commodity: z.string().optional(),
  weight: z.number().min(0, "Weight must be positive"),
  pieces: z.number().int().min(0).optional(),
  pallets: z.number().int().min(0).optional(),
  dimensions: z.object({
    length: z.number().optional(),
    width: z.number().optional(),
    height: z.number().optional(),
  }).optional(),
  value: z.number().min(0).optional(),
  hazmat: z.object({
    class: z.string(),
    unNumber: z.string(),
    properShippingName: z.string(),
    placard: z.string().optional(),
  }).optional(),
  temperature: z.object({
    min: z.number(),
    max: z.number(),
    unit: z.enum(["F", "C"]),
  }).optional(),
  specialHandling: z.array(z.string()).optional(),
});
export const rateSchema = z.object({
  total: z.number().min(0, "Total rate must be non-negative"),
  currency: z.string().default("USD"),
  type: z.enum(["flat", "per_mile", "percentage"]).default("flat"),
  lineHaul: z.number().min(0, "Line haul must be non-negative"),
  fuelSurcharge: z.number().min(0).optional(),
  detention: z.number().min(0).optional(),
  layover: z.number().min(0).optional(),
  loading: z.number().min(0).optional(),
  unloading: z.number().min(0).optional(),
  additionalStops: z.number().min(0).optional(),
  deadhead: z.number().min(0).optional(),
  permits: z.number().min(0).optional(),
  tolls: z.number().min(0).optional(),
  other: z.number().min(0).optional(),
  otherDescription: z.string().optional(),
  advancePay: z.number().min(0).optional(),
  brokerageRate: z.number().min(0).optional(),
  commissionRate: z.number().min(0).optional(),
  driverPay: z.number().min(0).optional(),
  driverPayType: z.enum(["percentage", "flat", "per_mile"]).optional(),
  notes: z.string().optional(),
});

// Schema for creating a new load
export const createLoadSchema = z.object({
  referenceNumber: z.string().min(1, "Reference number is required"),
  priority: z.enum(["low", "medium", "high", "urgent"]).default("medium"),
  customer: customerSchema,
  origin: locationSchema,
  destination: locationSchema,
  pickupDate: z.string().min(1, "Pickup date is required"),
  deliveryDate: z.string().min(1, "Delivery date is required"),
  estimatedPickupTime: z.string().optional(),
  estimatedDeliveryTime: z.string().optional(),
  equipment: equipmentRequirementSchema.optional(),
  cargo: cargoDetailsSchema,
  rate: rateSchema,
  miles: z.number().min(0).optional(),
  estimatedMiles: z.number().min(0).optional(),
  notes: z.string().optional(),
  internalNotes: z.string().optional(),
  specialInstructions: z.string().optional(),
  brokerInfo: z.any().optional(),
  tags: z.array(z.string()).optional(),
  driver: z.object({ id: z.string().optional(), name: z.string().optional() }).optional(),
  vehicle: z.object({ id: z.string().optional() }).optional(),
  trailer: z.object({ id: z.string().optional() }).optional(),
});
// Schema for updating an existing load (partial fields optional)
export const updateLoadSchema = z.object({
  id: z.string(),
  referenceNumber: z.string().min(1).optional(),
  priority: z.enum(["low", "medium", "high", "urgent"]).optional(),
  status: z.enum([
    "draft", "pending", "posted", "booked", "confirmed", "assigned",
    "dispatched", "in_transit", "at_pickup", "picked_up", "en_route",
    "at_delivery", "delivered", "pod_required", "completed", "invoiced",
    "paid", "cancelled", "problem",
  ]).optional(),
  customer: customerSchema.optional(),
  origin: locationSchema.optional(),
  destination: locationSchema.optional(),
  pickupDate: z.string().optional(),
  deliveryDate: z.string().optional(),
  estimatedPickupTime: z.string().optional(),
  estimatedDeliveryTime: z.string().optional(),
  actualPickupTime: z.string().optional(),
  actualDeliveryTime: z.string().optional(),
  equipment: equipmentRequirementSchema.optional(),
  cargo: cargoDetailsSchema.optional(),
  rate: rateSchema.optional(),
  miles: z.number().min(0).optional(),
  estimatedMiles: z.number().min(0).optional(),
  fuelCost: z.number().min(0).optional(),
  notes: z.string().optional(),
  internalNotes: z.string().optional(),
  specialInstructions: z.string().optional(),
  brokerInfo: z.any().optional(),
  tags: z.array(z.string()).optional(),
  driver: z.object({ id: z.string().optional() }).optional(),
  vehicle: z.object({ id: z.string().optional() }).optional(),
  trailer: z.object({ id: z.string().optional() }).optional(),
});
// Schema for assigning driver/vehicle to a load
export const loadAssignmentSchema = z.object({
  loadId: z.string().min(1),
  driverId: z.string().min(1),
  vehicleId: z.string().min(1),
  trailerId: z.string().optional(),
});
// Schema for updating load status (could include location data)
export const loadStatusUpdateSchema = z.object({
  loadId: z.string().min(1),
  status: z.enum([
    "draft", "pending", "posted", "booked", "confirmed", "assigned",
    "dispatched", "in_transit", "at_pickup", "picked_up", "en_route",
    "at_delivery", "delivered", "pod_required", "completed", "invoiced",
    "paid", "cancelled", "problem",
  ]),
  location: z.any().optional(),
});
